{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport CustomerDataService from \"@/services/CustomerDataService\";\n/* eslint-disable */\n\nexport default {\n  name: \"customers\",\n  data: function data() {\n    // 변수의 초기화 하기\n    return {\n      customers: [],\n      // Todo: title => searchEmail 변경 수정\n      searchEmail: \"\",\n      // Todo: 아래 변수 추가\n      page: 1,\n      count: 0,\n      pageSize: 3,\n      pageSizes: [3, 6, 9]\n    };\n  },\n  methods: {\n    // Todo: getRequestParams 추가\n    // 역할 : springboot로 매개변수들(parameter) 전송\n    // 웹 매개변수 : http://localhost:8080/customers?page=1&size=3\n    getRequestParams: function getRequestParams(searchEmail, page, pageSize) {\n      var params = {}; // searchEmail값이 있으면 매개변수로 전송\n\n      if (searchEmail) {\n        params[\"email\"] = searchEmail;\n      }\n\n      if (page) {\n        params[\"page\"] = page - 1;\n      }\n\n      if (pageSize) {\n        params[\"size\"] = pageSize;\n      } // 3개가 다 들어왔다면 아래 형태로 springboot로 전송\n      // params {\n      //  \"email\":\"forbob@naver.com\",\n      //  \"page\":0,\n      //  \"size\":3\n      // }\n\n\n      return params;\n    },\n    // 모든 회원 조회 서비스 호출\n    retrieveCustomers: function retrieveCustomers() {\n      var _this = this;\n\n      // Todo: getRequestParams 호출 추가\n      var params = this.getRequestParams(this.searchEmail, this.page, this.pageSize); // Todo: getAll() -> getAll(params)\n      // axios로 spring에 모든 회원 조회 요청\n\n      CustomerDataService.getAll(params) //  성공하면 then으로 서버(spring) 데이터(response.data)가 들어옴\n      // Todo: 아래 수정\n      .then(function (response) {\n        // this.customers = response.data;\n        var _response$data = response.data,\n            customers = _response$data.customers,\n            totalItems = _response$data.totalItems; // springboot 받은 객체 정보\n\n        _this.customers = customers; // springboot에서 받은 총 데이터 건수\n\n        _this.count = totalItems;\n      }) //  실패하면 catch로 에러메세지가 들어옴\n      .catch(function (e) {\n        alert(e);\n      });\n    },\n    // Todo: 신규 메소드 2개 추가\n    // 현재page를 다른 페이지번호로 변경시 호출되는 메소드\n    handlePageChange: function handlePageChange(value) {\n      // 현재페이지 변경\n      this.page = value; // 재 조회\n\n      this.retrieveCustomers();\n    },\n    // 페이지사이즈(3,6,9) 변경시 호출되는 메소드\n    handlePageSizeChange: function handlePageSizeChange(event) {\n      this.pageSize = event.target.value; // select박스의 값\n\n      this.page = 1; // 재 조회\n\n      this.retrieveCustomers();\n    }\n  },\n  //화면이 뜨자마자 실행되는 이벤트(모든 회원조회가 실행됨)\n  mounted: function mounted() {\n    this.retrieveCustomers();\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AAEA;;AACA;EACAA,iBADA;EAEAC,IAFA,kBAEA;IACA;IACA;MACAC,aADA;MAEA;MACAC,eAHA;MAIA;MACAC,OALA;MAMAC,QANA;MAOAC,WAPA;MASAC;IATA;EAWA,CAfA;EAgBAC;IACA;IACA;IACA;IACAC,gBAJA,4BAIAN,WAJA,EAIAC,IAJA,EAIAE,QAJA,EAIA;MACA,gBADA,CAGA;;MACA;QACAI;MACA;;MAEA;QACAA;MACA;;MAEA;QACAA;MACA,CAdA,CAgBA;MACA;MACA;MACA;MACA;MACA;;;MACA;IACA,CA3BA;IA4BA;IACAC,iBA7BA,+BA6BA;MAAA;;MACA;MACA,mCACA,gBADA,EAEA,SAFA,EAGA,aAHA,EAFA,CAQA;MACA;;MACAC,mCACA;MACA;MAFA,CAGAC,IAHA,CAGA;QACA;QACA;QAAA;QAAA,2CAFA,CAGA;;QACA,4BAJA,CAKA;;QACA;MACA,CAVA,EAWA;MAXA,CAYAC,KAZA,CAYA;QACAC;MACA,CAdA;IAeA,CAtDA;IAuDA;IACA;IACAC,gBAzDA,4BAyDAC,KAzDA,EAyDA;MACA;MACA,kBAFA,CAGA;;MACA;IACA,CA9DA;IA+DA;IACAC,oBAhEA,gCAgEAC,KAhEA,EAgEA;MACA,mCADA,CACA;;MACA,cAFA,CAGA;;MACA;IACA;EArEA,CAhBA;EAuFA;EACAC,OAxFA,qBAwFA;IACA;EACA;AA1FA","names":["name","data","customers","searchEmail","page","count","pageSize","pageSizes","methods","getRequestParams","params","retrieveCustomers","CustomerDataService","then","catch","alert","handlePageChange","value","handlePageSizeChange","event","mounted"],"sourceRoot":"src/components/customer","sources":["CustomerList.vue"],"sourcesContent":["<template>\r\n  <div class=\"container mt-3\">\r\n    <!-- TODO: 수정 시작 -->\r\n    <!-- search 관련 입력박스 시작 -->\r\n    <div class=\"col-md-8\">\r\n      <div class=\"input-group mb-3\">\r\n        <input\r\n          type=\"text\"\r\n          class=\"form-control\"\r\n          placeholder=\"Search by Email\"\r\n          v-model=\"searchEmail\"\r\n        />\r\n        <div class=\"input-group-append\">\r\n          <button\r\n            class=\"btn btn-outline-secondary\"\r\n            type=\"button\"\r\n            @click=\"\r\n              page = 1;\r\n              retrieveCustomers();\r\n            \"\r\n          >\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <!-- search 관련 입력박스 끝 -->\r\n\r\n    <!-- TODO: PAGE 바 시작 -->\r\n    <div class=\"col-md-12\">\r\n      <div class=\"mb-3\">\r\n        Items per Page:\r\n        <select v-model=\"pageSize\" @change=\"handlePageSizeChange($event)\">\r\n          <!-- pageSizes : [3,6,9] -->\r\n          <option v-for=\"size in pageSizes\" :key=\"size\" :value=\"size\">\r\n            {{ size }}\r\n          </option>\r\n        </select>\r\n      </div>\r\n      <!-- page : 현재페이지, count : 총데이터건수 -->\r\n      <!-- pageSize : 1페이지당 개수(건수) -->\r\n      <b-pagination\r\n        v-model=\"page\"\r\n        :total-rows=\"count\"\r\n        :per-page=\"pageSize\"\r\n        prev-text=\"Prev\"\r\n        next-text=\"Next\"\r\n        @change=\"handlePageChange\"\r\n      ></b-pagination>\r\n    </div>\r\n    <!-- TODO: PAGE 바 끝 -->\r\n\r\n    <table class=\"table\">\r\n      <thead>\r\n        <tr>\r\n          <th scope=\"col\">First Name</th>\r\n          <th scope=\"col\">Last Name</th>\r\n          <th scope=\"col\">Email</th>\r\n          <th scope=\"col\">Phone</th>\r\n          <th scope=\"col\">Actions</th>\r\n        </tr>\r\n      </thead>\r\n      <!--      조회 데이터 생성 부분-->\r\n      <tbody v-for=\"(customer, index) in customers\" :key=\"index\">\r\n        <tr>\r\n          <td>{{ customer.firstName }}</td>\r\n          <td>{{ customer.lastName }}</td>\r\n          <td>{{ customer.email }}</td>\r\n          <td>{{ customer.phone }}</td>\r\n          <td>\r\n            <a :href=\"'/customers/' + customer.id\" class=\"btn btn-primary\">\r\n              Edit\r\n            </a>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport CustomerDataService from \"@/services/CustomerDataService\";\r\n\r\n/* eslint-disable */\r\nexport default {\r\n  name: \"customers\",\r\n  data() {\r\n    // 변수의 초기화 하기\r\n    return {\r\n      customers: [],\r\n      // Todo: title => searchEmail 변경 수정\r\n      searchEmail: \"\",\r\n      // Todo: 아래 변수 추가\r\n      page: 1,\r\n      count: 0,\r\n      pageSize: 3,\r\n\r\n      pageSizes: [3, 6, 9],\r\n    };\r\n  },\r\n  methods: {\r\n    // Todo: getRequestParams 추가\r\n    // 역할 : springboot로 매개변수들(parameter) 전송\r\n    // 웹 매개변수 : http://localhost:8080/customers?page=1&size=3\r\n    getRequestParams(searchEmail, page, pageSize) {\r\n      let params = {};\r\n\r\n      // searchEmail값이 있으면 매개변수로 전송\r\n      if (searchEmail) {\r\n        params[\"email\"] = searchEmail;\r\n      }\r\n\r\n      if (page) {\r\n        params[\"page\"] = page - 1;\r\n      }\r\n\r\n      if (pageSize) {\r\n        params[\"size\"] = pageSize;\r\n      }\r\n\r\n      // 3개가 다 들어왔다면 아래 형태로 springboot로 전송\r\n      // params {\r\n      //  \"email\":\"forbob@naver.com\",\r\n      //  \"page\":0,\r\n      //  \"size\":3\r\n      // }\r\n      return params;\r\n    },\r\n    // 모든 회원 조회 서비스 호출\r\n    retrieveCustomers() {\r\n      // Todo: getRequestParams 호출 추가\r\n      const params = this.getRequestParams(\r\n        this.searchEmail,\r\n        this.page,\r\n        this.pageSize\r\n      );\r\n\r\n      // Todo: getAll() -> getAll(params)\r\n      // axios로 spring에 모든 회원 조회 요청\r\n      CustomerDataService.getAll(params)\r\n        //  성공하면 then으로 서버(spring) 데이터(response.data)가 들어옴\r\n        // Todo: 아래 수정\r\n        .then((response) => {\r\n          // this.customers = response.data;\r\n          const { customers, totalItems } = response.data;\r\n          // springboot 받은 객체 정보\r\n          this.customers = customers;\r\n          // springboot에서 받은 총 데이터 건수\r\n          this.count = totalItems;\r\n        })\r\n        //  실패하면 catch로 에러메세지가 들어옴\r\n        .catch((e) => {\r\n          alert(e);\r\n        });\r\n    },\r\n    // Todo: 신규 메소드 2개 추가\r\n    // 현재page를 다른 페이지번호로 변경시 호출되는 메소드\r\n    handlePageChange(value) {\r\n      // 현재페이지 변경\r\n      this.page = value;\r\n      // 재 조회\r\n      this.retrieveCustomers();\r\n    },\r\n    // 페이지사이즈(3,6,9) 변경시 호출되는 메소드\r\n    handlePageSizeChange(event) {\r\n      this.pageSize = event.target.value; // select박스의 값\r\n      this.page = 1;\r\n      // 재 조회\r\n      this.retrieveCustomers();\r\n    },\r\n  },\r\n  //화면이 뜨자마자 실행되는 이벤트(모든 회원조회가 실행됨)\r\n  mounted() {\r\n    this.retrieveCustomers();\r\n  },\r\n};\r\n</script>"]},"metadata":{},"sourceType":"module"}
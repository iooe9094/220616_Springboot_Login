{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport AuthService from \"@/services/auth/AuthService\"; // 로컬저장소(크롬의 localStorage)에서 user의 정보를 받기\n\nvar user = JSON.parse(localStorage.getItem(\"user\")); // user 상태 정보 설정 : initialState\n// 1) 로그인(loggedIn)이 되어 있을 때의 정보 : loggedIn = true\n// 2) 로그인(loggedIn)이 되어 있지 않을 때의 정보 : loggedIn = false\n// 삼항연산자 -> (조건==true) ? 1번실행 : 2번실행\n\nvar initialState = user ? {\n  status: {\n    loggedIn: true\n  },\n  user: user\n} : {\n  status: {\n    loggedIn: false\n  },\n  user: null\n};\nexport var auth = {\n  // 공유 데이터 정의 (전역 변수)\n  state: initialState,\n  // setter 메소드 정의\n  mutations: {\n    // 로그인 성공 메소드\n    loginSuccess: function loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    // 로그인 실패 메소드\n    loginFailure: function loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // 로그아웃 메소드 (상태정보 갱신: false)\n    logout: function logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // 회원가입 성공 메소드 (상태정보 갱신: false)\n    registerSuccess: function registerSuccess(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // 회원가입 실패 메소드 (상태정보 갱신: false)\n    registerFailure: function registerFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    }\n  },\n  // 비 동기 메소드 정의\n  // axios 통신 (성격: 서버에서 결과를 언제 보내줄 지 모름)\n  actions: {\n    login: function login(_ref, user) {\n      var commit = _ref.commit;\n      // axios 통신 : login (AuthService.login)\n      // springboot로 login 관련 요청 (username, password)\n      return AuthService.login(user) // 성공하면 then으로 결과 들어옴\n      .then(function (user) {\n        // commit (mutations 메소드 명)\n        // loginSuccess(state, user) 메소드 호출\n        // loggedIn 속성 : true / user 속성 : user\n        commit('loginSuccess', user);\n        return Promise.resolve(user);\n      }, function (error) {\n        // loginFailure(state) 메소드 호출\n        commit('loginFailure'); // 비동기 함수 실패 시 : Promise.reject\n\n        return Promise.reject(error);\n      });\n    },\n    // logout : AuthService.logout 호출\n    logout: function logout(_ref2) {\n      var commit = _ref2.commit;\n      // 로컬저장소에서 user 삭제\n      AuthService.logout(); // 상태정보 갱신 : loggedIn = false\n      // mutations : logout(state) 메소드 호출\n\n      commit(\"logout\");\n    },\n    // register(회원가입) AuthService.register\n    register: function register(_ref3, user) {\n      var commit = _ref3.commit;\n      // axios 서버쪽으로 user 객체를 전송하여 insert 요청\n      AuthService.register(user) // 성공하면 then으로 결과가 들어옴\n      .then(function (response) {\n        // mutations : registerSuccess(state) 메소드 호출\n        commit(\"registerSuccess\"); // 비동기함수 성공 시 : Promise.resolve 호출\n\n        return Promise.resolve(response.data);\n      }, function (error) {\n        // mutations : registerFailure(state) 메소드 호출\n        commit(\"registerFailure\"); // 비동기함수 실패 시 : Promise.reject 호출\n\n        return Promise.reject(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["AuthService","user","JSON","parse","localStorage","getItem","initialState","status","loggedIn","auth","state","mutations","loginSuccess","loginFailure","logout","registerSuccess","registerFailure","actions","login","commit","then","Promise","resolve","error","reject","register","response","data"],"sources":["/Users/macbook/Desktop/drive-download-20220616T015757Z-001/front-end/src/store/AuthModule.js"],"sourcesContent":["import AuthService from \"@/services/auth/AuthService\";\n\n// 로컬저장소(크롬의 localStorage)에서 user의 정보를 받기\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\n// user 상태 정보 설정 : initialState\n// 1) 로그인(loggedIn)이 되어 있을 때의 정보 : loggedIn = true\n// 2) 로그인(loggedIn)이 되어 있지 않을 때의 정보 : loggedIn = false\n// 삼항연산자 -> (조건==true) ? 1번실행 : 2번실행\nconst initialState = user\n  ? { status: { loggedIn: true }, user }\n  : { status: { loggedIn: false }, user: null };\n\nexport const auth = {\n  // 공유 데이터 정의 (전역 변수)\n  state: initialState,\n  // setter 메소드 정의\n  mutations: {\n    // 로그인 성공 메소드\n    loginSuccess(state, user) {\n      state.status.loggedIn = true;\n      state.user = user;\n    },\n    // 로그인 실패 메소드\n    loginFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // 로그아웃 메소드 (상태정보 갱신: false)\n    logout(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // 회원가입 성공 메소드 (상태정보 갱신: false)\n    registerSuccess(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n    // 회원가입 실패 메소드 (상태정보 갱신: false)\n    registerFailure(state) {\n      state.status.loggedIn = false;\n      state.user = null;\n    },\n  },\n  // 비 동기 메소드 정의\n  // axios 통신 (성격: 서버에서 결과를 언제 보내줄 지 모름)\n  actions: {\n    login({ commit }, user) {\n      // axios 통신 : login (AuthService.login)\n      // springboot로 login 관련 요청 (username, password)\n      return AuthService.login(user)\n      // 성공하면 then으로 결과 들어옴\n      .then( user => {\n        // commit (mutations 메소드 명)\n        // loginSuccess(state, user) 메소드 호출\n        // loggedIn 속성 : true / user 속성 : user\n        commit('loginSuccess', user)\n        return Promise.resolve(user);\n          },\n          error => {\n        // loginFailure(state) 메소드 호출\n            commit('loginFailure');\n            // 비동기 함수 실패 시 : Promise.reject\n            return Promise.reject(error);\n          }\n      );\n    },\n    // logout : AuthService.logout 호출\n    logout({ commit }) {\n      // 로컬저장소에서 user 삭제\n      AuthService.logout();\n      // 상태정보 갱신 : loggedIn = false\n      // mutations : logout(state) 메소드 호출\n      commit(\"logout\");\n    },\n    // register(회원가입) AuthService.register\n    register({ commit }, user) {\n      // axios 서버쪽으로 user 객체를 전송하여 insert 요청\n      AuthService.register(user)\n      // 성공하면 then으로 결과가 들어옴\n          .then(response => {\n            // mutations : registerSuccess(state) 메소드 호출\n            commit(\"registerSuccess\");\n            // 비동기함수 성공 시 : Promise.resolve 호출\n            return Promise.resolve(response.data);\n          },\n          error => {\n            // mutations : registerFailure(state) 메소드 호출\n            commit(\"registerFailure\");\n            // 비동기함수 실패 시 : Promise.reject 호출\n            return Promise.reject(error);\n          }\n              )\n    }\n  },\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}